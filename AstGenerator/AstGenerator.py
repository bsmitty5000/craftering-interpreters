#AstGenerator.py
from jinja2 import Environment, FileSystemLoader
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

class Ast:

    def __init__(self, name, astType):
        self.name = name
        self.fields = {}
        self.astType = astType

    def add_field(self, fieldName, fieldType):
        self.fields[fieldName] = fieldType

env = Environment(
    loader=FileSystemLoader(f'{BASE_DIR}/AstGenerator/templates'),
    trim_blocks = True, 
    lstrip_blocks = True
)

asts = []

with open(f'{BASE_DIR}/AstGenerator/definitions.txt') as f:
    for line in f:

        definition = line.split(';')

        astFields = definition[2].split(',')
        astInst = Ast(definition[1].strip(), definition[0].strip())

        for field in astFields:
            fieldTokes = field.split()
            astInst.add_field(fieldTokes[1].strip(), fieldTokes[0].strip())
        
        asts.append(astInst)

template = env.get_template("ast.jinja")

outputDir = f'{BASE_DIR}/SeeSharp/Autogenerated'
if not os.path.isdir(outputDir):
    os.mkdir(outputDir)

for ast in asts:
    with open(f"{outputDir}/{ast.name}.cs", "w") as fh:
        fh.write(template.render(
            astType = ast.astType,
            astName = ast.name,
            fields = ast.fields
            )
        )

template = env.get_template("visitor.jinja")
astNames = []
for ast in asts:
    astNames.append(ast.name)

with open(f"{outputDir}/IAstVisitor.cs", "w") as fh:
    fh.write(template.render(
        astNames = astNames
        )
    )